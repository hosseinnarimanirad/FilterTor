// <auto-generated />
using System;
using SampleApp.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace SampleApp.Persistence.Ef.Migrations
{
    [DbContext(typeof(SampleAppContext))]
    partial class SampleAppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SampleApp.Core.Entities.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<decimal>("Credit")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisteredDate")
                        .HasColumnType("DATE");

                    b.HasKey("Id");

                    b.ToTable("Customer", "sample");

                    b.HasData(
                        new
                        {
                            Id = 100000L,
                            Credit = 100000m,
                            Name = "Customer A",
                            RegisteredDate = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 100001L,
                            Credit = 200000m,
                            Name = "Customer B",
                            RegisteredDate = new DateTime(2020, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 100002L,
                            Credit = 300000m,
                            Name = "Customer C",
                            RegisteredDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 100003L,
                            Credit = 400000m,
                            Name = "Customer D",
                            RegisteredDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SampleApp.Core.Entities.CustomerGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(2)")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId", "Type")
                        .IsUnique();

                    b.ToTable("CustomerGroup", "sample");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreateTime = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 100000L,
                            Type = "Government"
                        },
                        new
                        {
                            Id = 2L,
                            CreateTime = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 100000L,
                            Type = "Suspended"
                        },
                        new
                        {
                            Id = 3L,
                            CreateTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 100001L,
                            Type = "PrivateSector"
                        },
                        new
                        {
                            Id = 4L,
                            CreateTime = new DateTime(2022, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 100001L,
                            Type = "Golden"
                        },
                        new
                        {
                            Id = 5L,
                            CreateTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 100002L,
                            Type = "PrivateSector"
                        },
                        new
                        {
                            Id = 6L,
                            CreateTime = new DateTime(2022, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 100002L,
                            Type = "Suspended"
                        },
                        new
                        {
                            Id = 7L,
                            CreateTime = new DateTime(2022, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 100002L,
                            Type = "Limited"
                        },
                        new
                        {
                            Id = 8L,
                            CreateTime = new DateTime(2022, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 100003L,
                            Type = "Government"
                        });
                });

            modelBuilder.Entity("SampleApp.Core.Entities.Invoice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(2)")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("date");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("InvoiceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSettled")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Invoice", "sample");

                    b.HasData(
                        new
                        {
                            Id = 100L,
                            CreateTime = new DateTime(2023, 4, 4, 13, 8, 36, 4, DateTimeKind.Local).AddTicks(2391),
                            CustomerId = 100000L,
                            InvoiceDate = new DateTime(2022, 12, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceNumber = "100100",
                            InvoiceType = "FMCG",
                            IsSettled = false,
                            TotalAmount = 50000m
                        },
                        new
                        {
                            Id = 101L,
                            CreateTime = new DateTime(2023, 4, 4, 13, 8, 36, 4, DateTimeKind.Local).AddTicks(2403),
                            CustomerId = 100001L,
                            InvoiceDate = new DateTime(2022, 11, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceNumber = "100101",
                            InvoiceType = "Medical",
                            IsSettled = true,
                            TotalAmount = 40000m
                        },
                        new
                        {
                            Id = 102L,
                            CreateTime = new DateTime(2023, 4, 4, 13, 8, 36, 4, DateTimeKind.Local).AddTicks(2405),
                            CustomerId = 100001L,
                            InvoiceDate = new DateTime(2022, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceNumber = "100102",
                            InvoiceType = "FMCG",
                            IsSettled = false,
                            TotalAmount = 20000m
                        },
                        new
                        {
                            Id = 103L,
                            CreateTime = new DateTime(2023, 4, 4, 13, 8, 36, 4, DateTimeKind.Local).AddTicks(2406),
                            CustomerId = 100002L,
                            InvoiceDate = new DateTime(2022, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceNumber = "100103",
                            InvoiceType = "FMCG",
                            IsSettled = false,
                            TotalAmount = 25000m
                        },
                        new
                        {
                            Id = 104L,
                            CreateTime = new DateTime(2023, 4, 4, 13, 8, 36, 4, DateTimeKind.Local).AddTicks(2407),
                            CustomerId = 100003L,
                            InvoiceDate = new DateTime(2021, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceNumber = "100104",
                            InvoiceType = "Medical",
                            IsSettled = true,
                            TotalAmount = 10000m
                        },
                        new
                        {
                            Id = 105L,
                            CreateTime = new DateTime(2023, 4, 4, 13, 8, 36, 4, DateTimeKind.Local).AddTicks(2408),
                            CustomerId = 100002L,
                            InvoiceDate = new DateTime(2021, 4, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceNumber = "100105",
                            InvoiceType = "FMCG",
                            IsSettled = false,
                            TotalAmount = 10000m
                        });
                });

            modelBuilder.Entity("SampleApp.Core.Entities.InvoiceDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<decimal>("Discount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("InvoiceId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsPrize")
                        .HasColumnType("bit");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceDetail", "sample");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Count = 2,
                            Discount = 1m,
                            InvoiceId = 100L,
                            IsPrize = false,
                            ProductId = 100L,
                            UnitPrice = 2500m
                        },
                        new
                        {
                            Id = 2L,
                            Count = 9,
                            Discount = 9m,
                            InvoiceId = 100L,
                            IsPrize = false,
                            ProductId = 101L,
                            UnitPrice = 5000m
                        },
                        new
                        {
                            Id = 3L,
                            Count = 1,
                            Discount = 1000m,
                            InvoiceId = 100L,
                            IsPrize = true,
                            ProductId = 102L,
                            UnitPrice = 1000m
                        },
                        new
                        {
                            Id = 4L,
                            Count = 9,
                            Discount = 1m,
                            InvoiceId = 101L,
                            IsPrize = false,
                            ProductId = 103L,
                            UnitPrice = 4000m
                        },
                        new
                        {
                            Id = 5L,
                            Count = 2,
                            Discount = 9m,
                            InvoiceId = 101L,
                            IsPrize = false,
                            ProductId = 109L,
                            UnitPrice = 2000m
                        },
                        new
                        {
                            Id = 6L,
                            Count = 2,
                            Discount = 1m,
                            InvoiceId = 102L,
                            IsPrize = false,
                            ProductId = 100L,
                            UnitPrice = 2500m
                        },
                        new
                        {
                            Id = 7L,
                            Count = 5,
                            Discount = 9m,
                            InvoiceId = 102L,
                            IsPrize = false,
                            ProductId = 101L,
                            UnitPrice = 5000m
                        },
                        new
                        {
                            Id = 8L,
                            Count = 1,
                            Discount = 1000m,
                            InvoiceId = 102L,
                            IsPrize = true,
                            ProductId = 103L,
                            UnitPrice = 4000m
                        },
                        new
                        {
                            Id = 9L,
                            Count = 10,
                            Discount = 1m,
                            InvoiceId = 103L,
                            IsPrize = false,
                            ProductId = 105L,
                            UnitPrice = 2500m
                        },
                        new
                        {
                            Id = 10L,
                            Count = 10,
                            Discount = 1m,
                            InvoiceId = 104L,
                            IsPrize = false,
                            ProductId = 107L,
                            UnitPrice = 1000m
                        },
                        new
                        {
                            Id = 11L,
                            Count = 5,
                            Discount = 1m,
                            InvoiceId = 105L,
                            IsPrize = false,
                            ProductId = 107L,
                            UnitPrice = 1000m
                        },
                        new
                        {
                            Id = 12L,
                            Count = 2,
                            Discount = 9m,
                            InvoiceId = 105L,
                            IsPrize = false,
                            ProductId = 103L,
                            UnitPrice = 2500m
                        });
                });

            modelBuilder.Entity("SampleApp.Core.Entities.PrizeStore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(2)")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CustomerConditionJson")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("InvoiceConditionJson")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2(0)");

                    b.HasKey("Id");

                    b.ToTable("PrizeStore", (string)null);
                });

            modelBuilder.Entity("SampleApp.Core.Entities.CustomerGroup", b =>
                {
                    b.HasOne("SampleApp.Core.Entities.Customer", "Customer")
                        .WithMany("CustomerGroups")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SampleApp.Core.Entities.Invoice", b =>
                {
                    b.HasOne("SampleApp.Core.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SampleApp.Core.Entities.InvoiceDetail", b =>
                {
                    b.HasOne("SampleApp.Core.Entities.Invoice", "Invoice")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("SampleApp.Core.Entities.Customer", b =>
                {
                    b.Navigation("CustomerGroups");
                });

            modelBuilder.Entity("SampleApp.Core.Entities.Invoice", b =>
                {
                    b.Navigation("InvoiceDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
