// <auto-generated />
using System;
using Grid.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace SampleApp.Persistence.Ef.Migrations
{
    [DbContext(typeof(SampleAppContext))]
    partial class SampleAppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SampleApp.Core.Entities.Invoice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(2)")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("date");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("InvoiceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSettled")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Invoice", "sample");

                    b.HasData(
                        new
                        {
                            Id = 100L,
                            CreateTime = new DateTime(2022, 12, 11, 15, 1, 59, 527, DateTimeKind.Local).AddTicks(5384),
                            CustomerId = 100000L,
                            Discount = 10m,
                            InvoiceDate = new DateTime(2022, 12, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceNumber = "100100",
                            InvoiceType = "FMCG",
                            IsSettled = false,
                            TotalAmount = 50000m
                        },
                        new
                        {
                            Id = 101L,
                            CreateTime = new DateTime(2022, 12, 11, 15, 1, 59, 527, DateTimeKind.Local).AddTicks(5436),
                            CustomerId = 100001L,
                            Discount = 11m,
                            InvoiceDate = new DateTime(2022, 11, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceNumber = "100101",
                            InvoiceType = "Medical",
                            IsSettled = true,
                            TotalAmount = 40000m
                        },
                        new
                        {
                            Id = 102L,
                            CreateTime = new DateTime(2022, 12, 11, 15, 1, 59, 527, DateTimeKind.Local).AddTicks(5442),
                            CustomerId = 100001L,
                            Discount = 0m,
                            InvoiceDate = new DateTime(2022, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceNumber = "100102",
                            InvoiceType = "FMCG",
                            IsSettled = false,
                            TotalAmount = 20000m
                        },
                        new
                        {
                            Id = 103L,
                            CreateTime = new DateTime(2022, 12, 11, 15, 1, 59, 527, DateTimeKind.Local).AddTicks(5445),
                            CustomerId = 100002L,
                            Discount = 0m,
                            InvoiceDate = new DateTime(2022, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceNumber = "100103",
                            InvoiceType = "FMCG",
                            IsSettled = false,
                            TotalAmount = 25000m
                        },
                        new
                        {
                            Id = 104L,
                            CreateTime = new DateTime(2022, 12, 11, 15, 1, 59, 527, DateTimeKind.Local).AddTicks(5455),
                            CustomerId = 100003L,
                            Discount = 5m,
                            InvoiceDate = new DateTime(2021, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceNumber = "100104",
                            InvoiceType = "Medical",
                            IsSettled = true,
                            TotalAmount = 10000m
                        },
                        new
                        {
                            Id = 105L,
                            CreateTime = new DateTime(2022, 12, 11, 15, 1, 59, 527, DateTimeKind.Local).AddTicks(5459),
                            CustomerId = 100002L,
                            Discount = 0m,
                            InvoiceDate = new DateTime(2021, 4, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceNumber = "100105",
                            InvoiceType = "FMCG",
                            IsSettled = false,
                            TotalAmount = 10000m
                        });
                });

            modelBuilder.Entity("SampleApp.Core.Entities.InvoiceDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("InvoiceId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsPrize")
                        .HasColumnType("bit");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceDetail", "sample");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Count = 2,
                            Discount = 1m,
                            InvoiceId = 100L,
                            IsPrize = false,
                            ProductId = 100L,
                            UnitPrice = 2500m
                        },
                        new
                        {
                            Id = 2L,
                            Count = 9,
                            Discount = 9m,
                            InvoiceId = 100L,
                            IsPrize = false,
                            ProductId = 101L,
                            UnitPrice = 5000m
                        },
                        new
                        {
                            Id = 3L,
                            Count = 1,
                            Discount = 1000m,
                            InvoiceId = 100L,
                            IsPrize = true,
                            ProductId = 102L,
                            UnitPrice = 1000m
                        },
                        new
                        {
                            Id = 4L,
                            Count = 9,
                            Discount = 1m,
                            InvoiceId = 101L,
                            IsPrize = false,
                            ProductId = 103L,
                            UnitPrice = 4000m
                        },
                        new
                        {
                            Id = 5L,
                            Count = 2,
                            Discount = 9m,
                            InvoiceId = 101L,
                            IsPrize = false,
                            ProductId = 109L,
                            UnitPrice = 2000m
                        },
                        new
                        {
                            Id = 6L,
                            Count = 2,
                            Discount = 1m,
                            InvoiceId = 102L,
                            IsPrize = false,
                            ProductId = 100L,
                            UnitPrice = 2500m
                        },
                        new
                        {
                            Id = 7L,
                            Count = 5,
                            Discount = 9m,
                            InvoiceId = 102L,
                            IsPrize = false,
                            ProductId = 101L,
                            UnitPrice = 5000m
                        },
                        new
                        {
                            Id = 8L,
                            Count = 1,
                            Discount = 1000m,
                            InvoiceId = 102L,
                            IsPrize = true,
                            ProductId = 103L,
                            UnitPrice = 4000m
                        },
                        new
                        {
                            Id = 9L,
                            Count = 10,
                            Discount = 1m,
                            InvoiceId = 103L,
                            IsPrize = false,
                            ProductId = 105L,
                            UnitPrice = 2500m
                        },
                        new
                        {
                            Id = 10L,
                            Count = 10,
                            Discount = 1m,
                            InvoiceId = 104L,
                            IsPrize = false,
                            ProductId = 107L,
                            UnitPrice = 1000m
                        },
                        new
                        {
                            Id = 11L,
                            Count = 5,
                            Discount = 1m,
                            InvoiceId = 105L,
                            IsPrize = false,
                            ProductId = 107L,
                            UnitPrice = 1000m
                        },
                        new
                        {
                            Id = 12L,
                            Count = 2,
                            Discount = 9m,
                            InvoiceId = 105L,
                            IsPrize = false,
                            ProductId = 103L,
                            UnitPrice = 2500m
                        });
                });

            modelBuilder.Entity("SampleApp.Core.Entities.PolyFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConditionJson")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(2)")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CreatedByFullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasDefaultValue("بدون توضیح");

                    b.Property<string>("Title")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasDefaultValue("بدون عنوان");

                    b.HasKey("Id");

                    b.ToTable("PolyFilter", (string)null);
                });

            modelBuilder.Entity("SampleApp.Core.Entities.InvoiceDetail", b =>
                {
                    b.HasOne("SampleApp.Core.Entities.Invoice", "Invoice")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("SampleApp.Core.Entities.Invoice", b =>
                {
                    b.Navigation("InvoiceDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
